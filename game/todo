
misc:
	- [x] frontend: figure out proper way to handle js packages and ts compilation
	- [ ] backend: figure out proper way to handle js packages and ts compilation

game options:
	- [ ] client: have a frontend ui to select differnt game options (dummy checkboxes)
	- [ ] client: on confirmation enter matchmaking

matchmaking:
	- [x] have a basic websocket connection where the client sets up a connection
	- [x] server: send json msg for updates
	- [x] client: parse json msg fn

sockets:
	- [x] server: manage many connections with their corresponding client data
	- [x] implement a basic json format for default communication
	- [x] server: be able to send json for performance uncritical parts
	- [x] client: implement msg type multiplexor
	- [ ] server: connection state multiplexor
		-> go to execute specific action when the client is in for example matchmaking or a game

game:
	- [x] implement a ball that moves on each frame using babylon-js
	- [x] implement a binary msg format for frame updates
	- [x] server: send binary messages for frame updates
	- [ ] client: parse binary msg fn
	- [ ] implement basic pong using babylon-js

game state:
	- [ ] backend should be responsible for the balls position
	- [ ] backend: each game should have a unique id
	- [ ] backend: manage multiple games at the same time
	- [ ] add sidewalls with ball interaction
	- [ ] movable player paddles with ball interaction
	- [ ] point scoring
	- [ ] score board
	- [ ] win conditon (timer/score)

DOCS:
match making:
	- first connection of client to server via a websocket

websocket:
	- persistant connection from client joining matchmaking to leaving a game
