# TODO
## Major module: Live Chat:
### In this module, you need to create a chat feature for users
[x] The user should be able to send direct messages to other users.

[x] The user should be able to block other users, preventing them from seeing any
further messages from the blocked account.

[x] The user should be able to invite other users to play a Pong game through the
chat interface. --> FABI

[x] The tournament system should be able to notify users about the next game. --> FABI

[x] The user should be able to access other players’ profiles through the chat
interface. --> Already given through Endpoints

## Major module: Implement remote authentication.
### In this major module, the goal is to implement the following authentication system:
#### Google Sign-in . Key features and objectives include:
[x] Integrate the authentication system, allowing users to securely sign in.

[x] Obtain the necessary credentials and permissions from the authority to enable
secure login.

[x] Implement user-friendly login and authorization flows that adhere to best prac-
tices and security standards.
	[x] On top off QR, add Raw Secret --> provides both

[x] Ensure the secure exchange of authentication tokens and user information
between the web application and the authentication provider.

This major module aims to provide a remote user authentication, offering users a
secure and convenient way to access the web application


## Major module: Implement Two-Factor Authentication (2FA) and JWT.
### The goal of this major module is to enhance security and user authentication by introducing Two-Factor Authentication (2FA) and utilizing JSON Web Tokens (JWT). Key features and objectives include:

Implement Two-Factor Authentication (2FA) as an additional layer of security
for user accounts, requiring users to provide a secondary verification method,
such as a one-time code, in addition to their password.

- [x] Utilize JSON Web Tokens (JWT) as a secure method for authentication and
authorization, ensuring that user sessions and access to resources are managed
securely.
- [x] Provide a user-friendly setup process for enabling 2FA, with options for SMS --> upon setting up 2FA, a secret is generated as string (manual way) + with QR Code
codes, authenticator apps, or email-based verification.
- [x] Ensure that JWT tokens are issued and validated securely to prevent unau-
thorized access to user accounts and sensitive data.
This major module aims to strengthen user account security by offering Two-Factor
Authentication (2FA) and enhancing authentication and authorization through the
use of JSON Web Tokens (JWT).


## MISC
- [x]	Input sanitization (front -and Backend) --> BIG ONE
- [x] '/api/me/anonymize' FIX --> after doing that user needs new credential in
order to not looses his account
- [~] HTTPs & wss
- [x] IF enough time ANTI IDOR design (IDOR = Insecure Direct Object Reference) : change API design from
	- Pattern: '/api/users/:id/....' --> '/api/me/....'
	- [x] '/api/users/:id/matches'
	- [x] '/api/users/:id/stats'
	- [x] '/api/users/:id/block/:targetId's
	- [x] '/api/users/:id/block', --> '/api/me/block/:targetId',
- [x] Any password stored in your database, if applicable, must be hashed.
- [] Your website must be protected against SQL injections/XSS attacks.
- [x] If you have a backend or any other features, it is mandatory to enable an HTTPS
connection for all aspects (use wss instead of ws for example).
- [x] You must implement validation mechanisms for forms and any user input, either on
the base page if no backend is used, or on the server side if a backend is employed.
- [x] Regardless of whether you choose to implement the JWT Security module with
2FA, it’s essential to prioritize the security of your website. For instance, if you
choose to create an API, ensure your routes are protected. Even if you decide not
to use JWT tokens, securing the site remains critical.
- [] Add State Check to Google Sign In
- [~] delete pending friend request upon block (like friendship)
- [] try catch um SQL ops
- [x] getAllLiveUserCount
- [] Help Makim with CSRF in FE
- [x] getLivePlayersCount() Create GET API
- [x] // "build2": "node --max-old-space-size=4096 node_modules/vite/bin/vite.js build", --> Add to package.json Frontend
- [] Mr Proper Clean-UP


### csrfProtection
- [x] BackEnd --> Plugin works
- [x] FrontEnd --> every route that sends JWT Token as Cookie (everywhere)
- [] Add more secure schemas to routes (cross module)

- [x]	add remove friend endpoint
- [x]	add all scores per matchID endoint
- [x]	disable 2FA

### Nice to have after Google Sign In
- [x]	Add Blocked User List --> protects user from receiving further friend requests & game invites (to be discussed with Fabi) + live chat
- [x]	Add Unblock User endpoint
- [x]	Add deleteUserAccount Endpoint --> deletes entire User-Account: (GDPR compliance Module)
			() after deletion, data related to this account shows 'deleted Account' instead of his old $username$

## Minor module: GDPR compliance options with user anonymization, local data management, and account deletion.
The goal of this minor module is to introduce GDPR compliance options that allow
users to exercise their data privacy rights. Key features and objectives include:

[x]	Implement GDPR-compliant features that enable users to request anonymiza-
	tion of their personal data, ensuring that their identity and sensitive informa-
	tion are protected.

[x]	Provide tools for users to manage their local data, including the ability to
	view, edit, or delete their personal information stored within the system.

[x]	Add EndPoint to Download every stored data as Json

[x]	Offer a streamlined process for users to request the permanent deletion of
	their accounts, including all associated data, ensuring compliance with data
	protection regulations.

[x]	Maintain clear and transparent communication with users regarding their data
	privacy rights, with easily accessible options to exercise these rights.


## Major module: Standard user management, authentication and users across tournaments.
- [x] Users can securely subscribe to the website.
- [x] Registered users can securely log in.
- [x] Users can select a unique display name to participate in tournaments.
- [x] Users can update their information.
- [x] Users can upload an avatar, with a default option if none is provided.
- [x] Users can add others as friends and view their online status.
- [x] User profiles display stats, such as wins and losses.
- [x] Each user has a Match History including 1v1 games, dates, and relevant
details, accessible to logged-in users.


## Minor module: User and Game Stats Dashboards.
In this minor module, the goal is to introduce dashboards that display statistics for
individual users and game sessions. Key features and objectives include:
- [x] Create user-friendly dashboards that provide users with insights into their
gaming statistics.
- [x] Develop a separate dashboard for game sessions, showing detailed statistics,
outcomes, and historical data for each match.
- [x] Ensure that the dashboards offer an intuitive and informative user interface
for tracking and analyzing data.
- [x] Implement data visualization techniques, such as charts and graphs, to present
statistics in a clear and visually appealing manner.
- [x] Allow users to access and explore their own gaming history and performance
metrics conveniently. --> dilin (filter by mode)
- [x] Feel free to add any metrics you deem useful.


## FINAL
- [] Check Reject {"message":"Route GET:/api/me/requests/12/reject not found","error":"Not Found","statusCode":404}
- [] {"message":"Route GET:/api/me/requests/3/accept not found","error":"Not Found","statusCode":plugin 404}
- [] Add rate Limit per User and not per IP --> register plugin after JWT
- [] GDPR Export with media does not include the media

